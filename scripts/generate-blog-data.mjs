import fs from "fs";
import path from "path";
import matter from "gray-matter";

const postsDirectory = path.join(process.cwd(), "posts");
const outputFilePath = path.join(
	process.cwd(),
	"src/data/blogPosts.generated.ts"
);

function getPostData() {
	if (!fs.existsSync(postsDirectory)) {
		console.error(`Error: Posts directory not found at ${postsDirectory}`);
		process.exit(1);
	}
	const fileNames = fs
		.readdirSync(postsDirectory)
		.filter((name) => name.endsWith(".md"));
	const allPostsData = fileNames.map((fileName) => {
		const id = fileName.replace(/\\.md$/, "");

		const fullPath = path.join(postsDirectory, fileName);
		const fileContents = fs.readFileSync(fullPath, "utf8");

		const matterResult = matter(fileContents);

		return {
			id,
			title: matterResult.data.title || "Untitled",
			date: matterResult.data.date || new Date().toISOString(),
			author: matterResult.data.author || "Unknown",
			slug: matterResult.data.slug || id,
			excerpt: matterResult.data.excerpt || "",
			categories: matterResult.data.categories || [],
			image: matterResult.data.image || "",
			content: matterResult.content,
		};
	});

	return allPostsData;
}

try {
	const posts = getPostData();

	const outputDir = path.dirname(outputFilePath);
	if (!fs.existsSync(outputDir)) {
		fs.mkdirSync(outputDir, { recursive: true });
	}

	const interfacePath = path.join(process.cwd(), "src/interfaces/blogPost.ts");
	const relativeInterfacePath = path
		.relative(path.dirname(outputFilePath), interfacePath)
		.replace(/\\/g, "/")
		.replace(/\\.ts$/, "");

	const outputContent = `// This file is generated automatically by scripts/generate-blog-data.mjs
// Do not edit this file manually.

import type { BlogPostProps } from '${relativeInterfacePath}';

export const generatedBlogPosts: BlogPostProps[] = ${JSON.stringify(
		posts,
		null,
		2
	)};
`;

	fs.writeFileSync(outputFilePath, outputContent);

	console.log(
		`Successfully generated ${posts.length} posts to ${outputFilePath}`
	);
} catch (error) {
	console.error("Error generating blog posts:", error);
	process.exit(1);
}
